<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- every time when snake intersects itself or comes out of panel, the new instance of it is created -->
    <bean id="snake1" class="com.mysnake.app.model.Snake" scope="prototype">
        <constructor-arg name="xS" value="200.0"/>
        <constructor-arg name="yS" value="200.0"/>
    </bean>

    <bean id="food" class="com.mysnake.app.model.Food">
        <constructor-arg name="widthPanel" value="400"/>
        <constructor-arg name="heightPanel" value="400"/>
    </bean>

    <!-- this bean let to pick messages from property file. Always use this id for it! -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>
                    msgs
                </value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>

    <bean id="localeRu" class="java.util.Locale">
        <constructor-arg index="0" value="ru"/>
    </bean>

    <bean id="localeEn" class="java.util.Locale">
        <constructor-arg index="0" value="en"/>
        <constructor-arg index="1" value="GB"/>
    </bean>

    <!-- thanks to that tag (and lines 5-6 of this file) we don't need next two post processors-->
    <context:annotation-config/>

    <!-- this bean checks for all setters of properties with Required annotation.
         It throws an exception if it doesn't met all required dependencies for all beans -->
    <!-- <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/> -->

    <!-- this bean is needed to autowire properties with Autowired annotation in their setters \
        Note that autowiring is available when there is only one bean of the necessary type
        or the names of the property and the substantiated bean are same -->
    <!-- <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/> -->

    <!-- Next line provides scanning of the classes with Component annotation (and other stereotype annotations),
         so Spring creates automatically beans
         which names are names their classes with the first letter in lower case -->
    <context:component-scan base-package="com.mysnake.app"/>


    <!-- this Spring bean configurates the driver and connection to the database
         Notice that it is used autowiring to set this bean.
         Class org.springframework.jdbc.datasource.DriverManagerDataSource
         isn't effective way for connections in real-world applications:
         there are many classes which are more suitable for it (e.g., Commons DBCP which supports connection pools)-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver"/>
        <property name="url" value="jdbc:derby:d:\\mvn_test\\my-snake\\src\\main\\resources\\db;create=true"/>
        <!-- we can also set the username and password if the database requires them -->

        <!-- using Commons DBCP lets us to set some additional properties -->
        <property name="initialSize" value="3"/>
        <property name="maxActive" value="7"/>
    </bean>

    <!-- The DAO Support classes allows to take the common code for all dao classes (look at this class) -->
    <bean id="myDaoImpl" class="com.mysnake.app.dao.MyDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>

</beans>